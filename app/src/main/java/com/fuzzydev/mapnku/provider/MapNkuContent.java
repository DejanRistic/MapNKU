package com.fuzzydev.mapnku.provider;

import android.content.ContentValues;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import android.net.Uri;
import android.provider.BaseColumns;
import android.util.Log;

/**
 * This class was generated by the ContentProviderCodeGenerator project made by Foxykeep
 * <p>
 * (More information available https://github.com/foxykeep/ContentProviderCodeGenerator)
 */
public abstract class MapNkuContent {

    public static final Uri CONTENT_URI = Uri.parse("content://" + MapNkuProvider.AUTHORITY);

    private MapNkuContent() {
    }

    /**
     * Created in version 1
     */
    public static final class DbLocationItem extends MapNkuContent {

        private static final String LOG_TAG = DbLocationItem.class.getSimpleName();

        public static final String TABLE_NAME = "dbLocationItem";
        public static final String TYPE_ELEM_TYPE = "vnd.android.cursor.item/mapnku-dblocationitem";
        public static final String TYPE_DIR_TYPE = "vnd.android.cursor.dir/mapnku-dblocationitem";

        public static final Uri CONTENT_URI = Uri.parse(MapNkuContent.CONTENT_URI + "/" + TABLE_NAME);

        public static enum Columns implements ColumnMetadata {
            ID(BaseColumns._ID, "integer"),
            AUTHOR("author", "text"),
            BUILDING("building", "text"),
            NAME("name", "text"),
            LAT("lat", "text"),
            LNG("lng", "text"),
            FLOOR("floor", "text"),
            DESCRIPTION("description", "text"),
            MONDAY_TIME("mondayTime", "text"),
            TUESDAY_TIME("tuesdayTime", "text"),
            WEDNESDAY_TIME("wednesdayTime", "text"),
            THURSDAY_TIME("thursdayTime", "text"),
            FRIDAY_TIME("fridayTime", "text"),
            SATURDAY_TIME("saturdayTime", "text"),
            SUNDAY_TIME("sundayTime", "text"),
            DATE("date", "text");

            private final String mName;
            private final String mType;

            private Columns(String name, String type) {
                mName = name;
                mType = type;
            }

            @Override
            public int getIndex() {
                return ordinal();
            }

            @Override
            public String getName() {
                return mName;
            }

            @Override
            public String getType() {
                return mType;
            }
        }

        public static final String[] PROJECTION = new String[] {
                Columns.ID.getName(),
                Columns.AUTHOR.getName(),
                Columns.BUILDING.getName(),
                Columns.NAME.getName(),
                Columns.LAT.getName(),
                Columns.LNG.getName(),
                Columns.FLOOR.getName(),
                Columns.DESCRIPTION.getName(),
                Columns.MONDAY_TIME.getName(),
                Columns.TUESDAY_TIME.getName(),
                Columns.WEDNESDAY_TIME.getName(),
                Columns.THURSDAY_TIME.getName(),
                Columns.FRIDAY_TIME.getName(),
                Columns.SATURDAY_TIME.getName(),
                Columns.SUNDAY_TIME.getName(),
                Columns.DATE.getName()
        };

        private DbLocationItem() {
            // No private constructor
        }

        public static void createTable(SQLiteDatabase db) {
            if (MapNkuProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbLocationItem | createTable start");
            }
            db.execSQL("CREATE TABLE " + TABLE_NAME + " (" + Columns.ID.getName() + " " + Columns.ID.getType()+ " PRIMARY KEY AUTOINCREMENT" + ", " + Columns.AUTHOR.getName() + " " + Columns.AUTHOR.getType() + ", " + Columns.BUILDING.getName() + " " + Columns.BUILDING.getType() + ", " + Columns.NAME.getName() + " " + Columns.NAME.getType() + ", " + Columns.LAT.getName() + " " + Columns.LAT.getType() + ", " + Columns.LNG.getName() + " " + Columns.LNG.getType() + ", " + Columns.FLOOR.getName() + " " + Columns.FLOOR.getType() + ", " + Columns.DESCRIPTION.getName() + " " + Columns.DESCRIPTION.getType() + ", " + Columns.MONDAY_TIME.getName() + " " + Columns.MONDAY_TIME.getType() + ", " + Columns.TUESDAY_TIME.getName() + " " + Columns.TUESDAY_TIME.getType() + ", " + Columns.WEDNESDAY_TIME.getName() + " " + Columns.WEDNESDAY_TIME.getType() + ", " + Columns.THURSDAY_TIME.getName() + " " + Columns.THURSDAY_TIME.getType() + ", " + Columns.FRIDAY_TIME.getName() + " " + Columns.FRIDAY_TIME.getType() + ", " + Columns.SATURDAY_TIME.getName() + " " + Columns.SATURDAY_TIME.getType() + ", " + Columns.SUNDAY_TIME.getName() + " " + Columns.SUNDAY_TIME.getType() + ", " + Columns.DATE.getName() + " " + Columns.DATE.getType() + ");");

            if (MapNkuProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbLocationItem | createTable end");
            }
        }

        // Version 1 : Creation of the table
        public static void upgradeTable(SQLiteDatabase db, int oldVersion, int newVersion) {
            if (MapNkuProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbLocationItem | upgradeTable start");
            }

            if (oldVersion < 1) {
                Log.i(LOG_TAG, "Upgrading from version " + oldVersion + " to " + newVersion
                        + ", data will be lost!");

                db.execSQL("DROP TABLE IF EXISTS " + TABLE_NAME + ";");
                createTable(db);
                return;
            }


            if (oldVersion != newVersion) {
                throw new IllegalStateException("Error upgrading the database to version "
                        + newVersion);
            }

            if (MapNkuProvider.ACTIVATE_ALL_LOGS) {
                Log.d(LOG_TAG, "DbLocationItem | upgradeTable end");
            }
        }

        static String getBulkInsertString() {
            return new StringBuilder("INSERT INTO ").append(TABLE_NAME).append(" ( ").append(Columns.AUTHOR.getName()).append(", ").append(Columns.BUILDING.getName()).append(", ").append(Columns.NAME.getName()).append(", ").append(Columns.LAT.getName()).append(", ").append(Columns.LNG.getName()).append(", ").append(Columns.FLOOR.getName()).append(", ").append(Columns.DESCRIPTION.getName()).append(", ").append(Columns.MONDAY_TIME.getName()).append(", ").append(Columns.TUESDAY_TIME.getName()).append(", ").append(Columns.WEDNESDAY_TIME.getName()).append(", ").append(Columns.THURSDAY_TIME.getName()).append(", ").append(Columns.FRIDAY_TIME.getName()).append(", ").append(Columns.SATURDAY_TIME.getName()).append(", ").append(Columns.SUNDAY_TIME.getName()).append(", ").append(Columns.DATE.getName()).append(" ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)").toString();
        }

        static void bindValuesInBulkInsert(SQLiteStatement stmt, ContentValues values) {
            int i = 1;
            String value;
            value = values.getAsString(Columns.AUTHOR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.BUILDING.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.NAME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LAT.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.LNG.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FLOOR.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DESCRIPTION.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.MONDAY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.TUESDAY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.WEDNESDAY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.THURSDAY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.FRIDAY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SATURDAY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.SUNDAY_TIME.getName());
            stmt.bindString(i++, value != null ? value : "");
            value = values.getAsString(Columns.DATE.getName());
            stmt.bindString(i++, value != null ? value : "");
        }
    }
}

